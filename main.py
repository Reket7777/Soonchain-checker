import aiohttp
import asyncio
import json


ssl_check = False  # –í–∏–º–∏–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É SSL
airdrop_name = "Soonchain"  # –ù–∞–∑–≤–∞ –∞—ñ—Ä–¥—Ä–æ–ø—É

eligible = 0  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–∞–º–∞–Ω—Ü—ñ–≤, —è–∫—ñ –æ—Ç—Ä–∏–º–∞–ª–∏ –∞—ñ—Ä–¥—Ä–æ–ø
not_eligible = 0  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–∞–º–∞–Ω—Ü—ñ–≤, —è–∫—ñ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –∞—ñ—Ä–¥—Ä–æ–ø
summary = 0  # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–∞–º–∞–Ω—Ü—ñ–≤
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—ñ–≤ —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Ä—è–¥–∫–∞)
def read_file(file_name):
    with open(file_name, 'r') as file:
        return [line.strip() for line in file.readlines()]


# –ó—á–∏—Ç—É—î–º–æ –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤ —ñ –ø—Ä–æ–∫—Å—ñ –∑ —Ñ–∞–π–ª—ñ–≤
wallet_addresses = read_file("wallet_addresses.txt")
proxies_list = read_file("proxies.txt")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–∞–º–∞–Ω—Ü—ñ–≤ —ñ –ø—Ä–æ–∫—Å—ñ —Å–ø—ñ–≤–ø–∞–¥–∞—î
if len(wallet_addresses) != len(proxies_list):
    print("The number of wallets and proxies must be the same!")
else:
    print(f"\n      -- {airdrop_name} Airdrop checker --\n")
    async def fetch_data(wallet_address, proxy):
        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–∫—Å—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ URL, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ –ø—Ä–µ—Ñ—ñ–∫—Å
        if not proxy.startswith("http://") and not proxy.startswith("https://"):
            proxy = f"http://{proxy}"

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–∫—Å—ñ –¥–ª—è aiohttp
        connector = aiohttp.TCPConnector(ssl=ssl_check)  # –í–∏–º–∏–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É SSL
        timeout = aiohttp.ClientTimeout(total=10)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø–∏—Ç—É

        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            try:
                async with session.get(
                    "https://soonchain.ai/api/airdrop",
                    params={"addr": wallet_address},
                    proxy=proxy  # –ü–µ—Ä–µ–¥–∞—î–º–æ –ø—Ä–æ–∫—Å—ñ
                ) as response:
                    if response.status == 200:
                        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∑ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                        data = await response.json()
                        balance = json.loads(data.get("data", "{}")).get("balance", 0)
                        if balance:
                            global eligible
                            global summary
                            eligible += 1
                            summary += int(balance)
                            balance = 'üíé ' + balance
                        else:
                            global not_eligible
                            not_eligible += 1
                            balance = 'üö´'
                        print(f"{wallet_address} | Airdrop: {balance}")
                    else:
                        print(f"Error | {wallet_address}: {response.status}")
            except Exception as e:
                print(f"Error | {wallet_address}: {e}")

    async def main():
        tasks = []
        for wallet_address, proxy in zip(wallet_addresses, proxies_list):
            tasks.append(fetch_data(wallet_address, proxy))
        await asyncio.gather(*tasks)

    asyncio.run(main())

print(f"\nElegible: {eligible} | Not elegible: {not_eligible}", end=" ")
print(f"| Summary: {summary} tokens")
